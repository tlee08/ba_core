var __index = {"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":"<p>This site contains the documentation for the <code>ba_pipeline</code> program.</p> <p>To get started, use the menu on the left side of this page.</p>"},{"location":"diagnostics_messages/diagnostics_messages.html","title":"Diagnostics Messages","text":""},{"location":"diagnostics_messages/diagnostics_messages.html#the-diagnostics-outputs","title":"The Diagnostics Outputs","text":"<p>After any process is run, a diagnostics file with the name of the process is generated in the diagnostics folder.</p> <p>An example of what this can look like is shown below.</p> <p></p>"},{"location":"diagnostics_messages/diagnostics_messages.html#common-errors-and-warning","title":"Common Errors and Warning","text":"<p>In the diagnostics file, an error is something that has caused the processing of the experiment to fail completely. A warning is something that the program detected as unusual - it won't cause the program to fail but it is worth noting because it may affect future processes.</p> <p>Common warnings and errors that may arise are shown below, grouped by the process they usually occur in:</p> <ul> <li>updateConfigFiles<ul> <li>The user-given value for <code>config_fp</code> may be an incorrect filepath or that cconfig file itself may not be in a valid JSON format (e.g., a bracket or a comma might be missing). You can use one of the configs templates here.</li> </ul> </li> <li>formatVideos<ul> <li>The raw mp4 file may be missing or corrupted. Please try to open this file to see if this is the case.</li> <li>Sometimes, the resolution is an uncommon value and the downsampling fails. When this happens, the video is instead copied and the diagnostics file notes that the video failed to downsample and was copied instead.</li> </ul> </li> <li>runDLC<ul> <li>The specified dlc_config_path may be missing or incorrect. Please check that the correct filepath is used.</li> </ul> </li> <li>calculateParams<ul> <li>Throughout all the processes run within calculateParams, if any necessary parameter in the configs file are missing, then an error is added to the diagnostics file and the specific process stops. Future processes are usually affected by this error.</li> <li>getVideoMetadata<ul> <li>If the video file does not exist or is corrupted, then a warning is added the diagnostics file.</li> </ul> </li> <li>calcStartFrame<ul> <li>If the bodypart listed in the config file is not in the dlc_csv file, then a warning is thrown and the invalid bodypart is ignored.</li> <li>If the subject is not detected in any frames, then a warning is added to the diagnostics file. Please open and check the video to see if this is the case.</li> </ul> </li> <li>calcEndFrame<ul> <li>If the user-specified dur_sec (duration of the experiment in seconds) is larger than the length of the video, then a warning is added to the diagnostics file. Please open and check the video to see if this is the case.</li> </ul> </li> <li>calcPxPerMM<ul> <li>If the labels, \"TopLeft\", \"TopRight\", \"BottomLeft\", or \"BottomRight\", are missing from the dlc_csv file (i.e., if any of the box corners were not tracked), then an error message is added to the diagnostics file. Please ensure that you are using a DLC model that tracks the arena edges.</li> </ul> </li> </ul> </li> <li>preprocessing<ul> <li>Please note that some processes run within preprocessing depend on calculateParams. If there were any failed processes in calculateParams, please troubleshoot them before moving onto here.</li> <li>Throughout all the processes run within preprocessing, if any necessary parameter in the configs file are missing, then an error is added to the diagnostics file and the specific process stops. Future processes are usually affected by this error.</li> <li>InterpolatePoints:<ul> <li>If the bodypart listed in the config file is not in the dlc_csv file, then a warning is thrown and the invalid bodypart is ignored.</li> </ul> </li> <li>calcBodyCentre:<ul> <li>If the bodypart listed in the config file is not in the dlc_csv file, then a warning is thrown and the invalid bodypart is ignored. Note that bodyparts for this function are in \"user\" -&gt; \"preprocessing\" -&gt; \"calcBodyCentre\" -&gt; \"bodyparts\".</li> </ul> </li> </ul> </li> <li>analysis<ul> <li>Please note that most processes run within analysis depend on preprocessing. If there were any failed processes in calculateParams, please troubleshoot them before moving onto here.</li> </ul> </li> <li>aggregateAnalysis<ul> <li>The analysis process must be successfully run before the files generated from it can be aggregated.</li> </ul> </li> </ul>"},{"location":"installation/installing/conda.html","title":"For Linux","text":"<p>Step 1: Install conda by visiting the Miniconda downloads page and following the prompts to install on Mac.</p> <p> </p> <p>Step 2: Open the downloaded miniconda file and follow the installation prompts.</p> <p>Step 3: Open a terminal window. An image of this application is shown below.</p> <p> </p> <p>Step 4: Verify that conda has been installed with the following command.</p> <pre><code>conda --version\n</code></pre> <p>A response like <code>conda xx.xx.xx</code> indicates that it has been correctly installed.</p> <p>Step 5: Connect to the RDS</p> <p>Step 6: Navigate to the following folder named \"source\" in the terminal. You can do this by going to the folder using Finder and dragging this folder into the terminal. Make sure to type <code>cd</code> in the terminal app before dragging the folder into the terminal.</p> <p> </p> <pre><code>cd &lt;\\path\\to\\the\\source\\folder&gt;\n</code></pre> <p>Step 7: Create a conda virtual environment, where the program can run. The virtual environment will be called \"ba_env\".</p> <pre><code>conda install nb_conda nb_conda_kernels\nconda env create -f ba_pipeline.yaml\n</code></pre> <p>Step 8: Verify that <code>ba_pipeline</code> has been correctly installed by running:</p> <pre><code>conda env list\n</code></pre> <p>You should see <code>ba_env</code> listed in the terminal.</p>"},{"location":"installation/running/conda.html","title":"Running ba_pipeline","text":"<p>Step 1:</p> <p>FOR WINDOWS - Open an Anaconda PowerShell Prompt window (make sure this is specifically this application - some other command prompt windows make look similar but they won't work). An image of this application is shown below.</p> <p> </p> <p>FOR MAC OR LINUX - Open a terminal window. An image of this application is shown below.</p> <p> </p> <p>Step 2: Activate the program environment with the following command:</p> <pre><code>conda activate ba_env\n</code></pre> <p>Step 3: Navigate to the folder where you have (or would like to store) your Jupyter Notebook to analyse experiments with. This can be done with the following command:</p> <pre><code>cd /path/to/my_notebooks_folder\n</code></pre> <p>Step 4: Open a Jupyter-Lab server with the following command.</p> <pre><code>jupyter-lab\n</code></pre> <p>Step 5: To access the Jupyter-Lab server to interact with the <code>ba_pipeline</code> program, open a browser (e.g., Chrome, Safari, FireFox, Brave, Opera) and enter the following URL:</p> <pre><code>http://127.0.0.1:8888/lab\n</code></pre> <p>An example of how the Jupyter Notebook should look like is shown in the figure below.</p> <p> </p> <p>Step 6: Please ensure that it the \"ba_env\" kernel is used. To change the notebook's kernel to \"ba_env\", select \"Kernel\" &gt; \"Change Kernel...\" in the top left menu bar. Then select the \"ba_env\" from the prompt.</p> <p> </p> <p> </p> <p>Step 7: You can now use the <code>ba_pipeline</code> program through a Jupyter Notebook. For how to use this, please see the tutorials.</p>"},{"location":"installation/updating/conda.html","title":"Updating ba_pipeline","text":"<p>Step 1: Navigate to the following folder named \"source\" in the terminal. You can do this by navigating to the folder using File Explorer and dragging this folder into the terminal. Make sure to type <code>cd</code> in the terminal app before dragging the folder into the terminal.</p> <p> </p> <pre><code>cd &lt;/path/to/the/source/folder&gt;\n</code></pre> <p>Step 2: Run the following commands to open the conda virtual environment where the program is stored and update the program.</p> <pre><code>conda env update -n ba_env --file ba_pipeline.yaml\n</code></pre>"},{"location":"installation/updating/docker.html","title":"Docker","text":""},{"location":"installation/updating/docker.html#updating-ba_pipeline-with-docker","title":"Updating ba_pipeline with Docker","text":"<p>TODO</p>"},{"location":"reference/ba_core.html","title":"BAExperiment","text":""},{"location":"reference/ba_core.html#ba_core","title":"<code>ba_core</code>","text":""},{"location":"tutorials/explanation.html","title":"Explanation","text":"<p>The ba_pipeline (Behavioural Analysis) is used to analyse raw mp4 footage of lab mice. Analysis can include:</p> <ul> <li>Open Field</li> <li>Subject thigmotaxis</li> <li>Subject speed</li> <li>Choice (need to implement)</li> <li>etc.</li> </ul> <p>Converting raw mp4 footage to interpretable data and analysis involves the following steps:</p> <ol> <li>Setting up a BA project. This project will perform all the calculations to render analysises.</li> <li>Importing all the raw videos to into the project.</li> <li>Formatting all the raw videos so they can be interpreted by the DeepLabCut (DLC) pose estimation model.</li> <li>Run the formatted videos through the DLC pose estimation model to generate a video with the pose markers and a csv file of x-y coordinates of each marker (e.g., nose, left ear, right ear, body, front right foot, etc.).</li> <li>Preprocess the csv file of x-y marker coordinates so it is ready for analysis.</li> <li>Generate analysis from the preprocessed x-y marker coordinates file.</li> </ol> <p></p>"},{"location":"tutorials/explanation.html#making-a-project-to-analyse","title":"Making a Project to Analyse","text":"<p>The experiment files must be stored in the computer in a certain way so the program can analyse them. Files pertaining to each experiment must be stored in folders with specific names. The overall way that the files are structured in a project are shown below.</p> <p></p> <p>For more information about how to set up experiment files, see setup</p>"},{"location":"tutorials/setup.html","title":"Setup","text":"<p>Before running the ba_pipeline analysises, the files that we want to analyse must be set up a certain way for the ba_pipeline program to recognise them.</p> <p>There are three important guidelines to set up the project:</p> <ul> <li>Structure of files in folders .</li> <li>Experiment files.</li> <li>Config files for each experiment.</li> </ul>"},{"location":"tutorials/setup.html#folder-structure","title":"Folder Structure","text":"<p>They need to be set up inside specially named folders, as shown below.</p> <p></p> <p>An example of how this would look on a computer (in this case, a Mac) is shown below.</p> <p></p>"},{"location":"tutorials/setup.html#experiment-files","title":"Experiment Files","text":"<p>Each experiment must have files that have same name (not including the suffix like <code>.csv</code> or <code>.mp4</code>). An example is \"day1_experiment1\" must have all files named \"day1_experiment1.mp4\", \"day1_experiment1.csv\", \"day1_experiment1.json\" etc. stored in the corresponding folder.</p>"},{"location":"tutorials/setup.html#config-files","title":"Config Files","text":"<p>The config file for an experiment stores all the parameters for how the experiment was recorded (e.g., the frames per second of the raw video, the experiment duration, etc.), and the parameters for how we want to process the data (e.g., the intended frames per second to format the video to, the DLC model to use to analyse, the likeliness pcutoff to interpolate points, etc.)</p> <p>An example of a config file is shown in The Configs File page.</p>"},{"location":"tutorials/setup.html#running-ba_pipeline","title":"Running ba_pipeline","text":"<p>To install <code>ba_pipeline</code>, follow these instructions. To run <code>ba_pipeline</code>, follow these these instructions.</p>"},{"location":"tutorials/configs_setup/configs_OF.html","title":"Configs for Open Field","text":"<p>Update the config files of all experiments in your project by copying this template to another file and updating all experiment configs inside your Jupyter notebook with the commands found here.</p> configs_OF.json<pre><code>{\n  \"user\": {\n    \"arena_width_mm\": 400,\n    \"arena_height_mm\": 400,\n    \"dur_sec\": 130,\n    \"dlc_config_path\": \"dlc_model/config.yaml\",\n    \"bodyparts\": [\n      \"Nose\",\n      \"LeftEar\",\n      \"RightEar\",\n      \"NeckBase\",\n      \"BodyCentre\",\n      \"TailBase\",\n      \"TailMid\",\n      \"TailTip\"\n    ],\n    \"formatVideo\": {\n      \"height_px\": 270,\n      \"width_px\": 480\n    },\n    \"calculateParams\": {\n      \"calcStartFrame\": {\n        \"window_sec\": 3,\n        \"pcutoff\": 0.95\n      }\n    },\n    \"preprocessing\": {\n      \"interpolatePoints\": {\n        \"pcutoff\": 0.95\n      },\n      \"calcBodyCentre\": {\n        \"bodyparts\": [\"NeckBase\", \"BodyCentre\", \"TailBase\"]\n      }\n    },\n    \"5_analysis\": {\n      \"analyseThigmotaxis\": {\n        \"thresh_mm\": 20,\n        \"alpha\": 0.3,\n        \"edgecolor\": null,\n        \"s\": 5,\n        \"legend\": null\n      },\n      \"analyseSpeed\": {\n        \"smoothing_sec\": 1,\n        \"alpha\": 0.3\n      },\n      \"analyseDistance\": {\n        \"smoothing_sec\": 1,\n        \"alpha\": 0.3\n      },\n      \"bin_sizes_sec\": [1, 5]\n    }\n  },\n  \"auto\": {}\n}\n</code></pre>"},{"location":"tutorials/configs_setup/configs_setup.html","title":"The Configs File","text":"<p>The config file for an experiment stores all the parameters for how the experiment was recorded (e.g., the frames per second of the raw video, the experiment duration, etc.), and the parameters for how we want to process the data (e.g., the intended frames per second to format the video to, the DLC model to use to analyse, the likeliness pcutoff to interpolate points, etc.)</p> <p>An example of a config file is shown below. NOTE: DO NOT use the config file shown here as a template. This example is shown only to explain the key parameters in the config file. Instead, you can use one of these config templates:</p> <ul> <li>configs for Open Field</li> </ul> example configs file with descriptions. DO NOT USE. <p>Update the config files of all experiments in your project by copying a template to another file and updating all experiment configs inside your Jupyter notebook with the commands found here.</p>"},{"location":"tutorials/configs_setup/configs_update.html","title":"Updating All Config Files in a Project","text":""},{"location":"tutorials/configs_setup/configs_update.html#loading-in-all-relevant-packages","title":"Loading in all relevant packages","text":"<pre><code>from ba_pipeline import *\n</code></pre>"},{"location":"tutorials/configs_setup/configs_update.html#making-the-project-and-importing-all-experiments","title":"Making the project and importing all experiments","text":"<p>The directory path of the project must be specified and must contain the experiment files you wish to analyse in a particular folder structure.</p> <pre><code>proj_dir = \"path/to/project\" # Specify your project folder path here\nproj = BAProject(proj_dir)\n\nproj.importExperiments()\n</code></pre>"},{"location":"tutorials/configs_setup/configs_update.html#updating-the-configurations-for-the-experiment","title":"Updating the configurations for the experiment","text":"<p>To update the config files of experiments, a \"default\" config JSON file is used like a template to modify the individual experiment's config file. There are three settings for how the experiment config files are updated:</p> <ul> <li><code>overwrite=\"add\"</code>: Add only parameters from the default file to each experiment configs file, where the parameter does not already exist in the experiment configs.</li> <li><code>overwrite=\"set\"</code>: Add/overwrite all experiment parameters from the default file into the each experiment config file.</li> <li><code>overwrite=\"reset\"</code>: Completely reset each experiment config file to be a copy of the default file.</li> </ul> <pre><code>configs_fp = \"path/to/default_configs.json\"\nproj.updateConfigFiles(configs_fp, overwrite=\"add\") # overwrite can also be \"set\" or \"reset\"\n</code></pre>"},{"location":"tutorials/usage_examples/many_experiments.html","title":"Analysing Many Experiments","text":""},{"location":"tutorials/usage_examples/many_experiments.html#loading-in-all-relevant-packages","title":"Loading in all relevant packages","text":"<pre><code>from ba_pipeline import *\n</code></pre>"},{"location":"tutorials/usage_examples/many_experiments.html#making-the-experiments","title":"Making the Experiments","text":"<p>The directory path of the project must be specified and must contain the experiment files you wish to analyse in a particular folder structure.</p> <p>The process of analysing multiple experiments is just analysing each experiment and performing this multiple times (with a loop).</p> <p>For more information on how to structure a project directory, please see setup.</p> <p>For more information on how a <code>BAExperiment</code> works, please see BAExperiment.</p> <pre><code>proj_dir = \"./project\"\nexperiment_names = exp_name = [\"experiment1\", \"experiment2\", \"experiment3\"]\nexperiments = list()\n\nfor name in experiment_names:\n    exp = BAExperiment(name, proj_dir)\n    experiments.append(exp)\n</code></pre>"},{"location":"tutorials/usage_examples/many_experiments.html#updating-the-configurations-for-the-experiment","title":"Updating the configurations for the experiment","text":"<p>If you would like the configurations (which are stored in config files) to be updated new parameters, define the JSON style of configuration parameters you would like to add and run the following lines.</p> <p>For more information about how a configurations file works, please see the configs file.</p> <pre><code>configs_fp = \"path/to/default_configs.json\"\nfor exp in experiments:\n    exp.updateConfigFile(configs_fp, overwrite=\"add\")\n</code></pre>"},{"location":"tutorials/usage_examples/many_experiments.html#analysing-many-experiments_1","title":"Analysing many experiments","text":"<p>Each of the following processes will be explained prior to running the process.</p> <p><code>formatVideo</code> formats the raw mp4 video so it can be fed through the DLC pose estimation algorithm.</p> <pre><code>for exp in experiments:\n    exp.formatVideo()\n</code></pre> <p><code>runDLC</code>: Runs the DLC pose estimation algorithm on the formatted mp4 file.</p> <pre><code>for exp in experiments:\n    exp.runDLC()\n</code></pre> <p><code>calculateParams</code> calculates relevant parameters to store in the <code>auto</code> section of the config file. The calculations performed are:</p> <ul> <li><code>calcStartFrame</code>: calculates the start frame of the video based on when the subject entered the video.</li> <li><code>calcEndFrame</code>: calculates the end frame of the video based on the start frame and user-defined duration.</li> <li><code>calcPXPerMM</code>: calculates the pixels per mm conversion for the video based on the user-defined height and width of the arena.</li> </ul> <pre><code>for exp in experiments:\n    exp.calculateParams(getVideoMetadata, calcStartFrame, calcEndFrame, calcPXPerMM)\n</code></pre> <p><code>preprocess</code> preprocesses the DLC csv data and output the preprocessed data to a <code>preprocessed_csv.&lt;exp_name&gt;.csv</code> file. The preprocessings performed are:</p> <ul> <li><code>trimToStartEnd</code>: Trims the csv data between the experiment start and end frames, which are either defined by the user or from <code>calculateParams</code>.</li> <li><code>interpolatePoints</code>: Linearly interpolates subject points that have an accuracy below a user-defined pcutoff.</li> <li><code>calcBodyCentre</code>: Calculate the average \"centre\" of the subject, based on the user-defined list of body parts and name these $(x,y)$ points with a user-defined name. This $(x,y)$ data is added as a column to the raw data.</li> <li><code>mapTimestamps</code>: adds a column to the dataframe which is the time (in seconds) from the beginning of the video for each frame.</li> </ul> <pre><code>for exp in experiments:\n    exp.preprocess(trimToStartEnd, interpolatePoints, calcBodyCentre, mapTimestamps)\n</code></pre> <p><code>analyse</code> analyses the preprocessed csv data to extract useful analysis and results. The analyses performed are:</p> <ul> <li><code>analyseDistance</code>: Analyses the distance that the subject travels over time.</li> <li><code>analyseSpeed</code>: Analyses the speed of the subject over time.</li> <li><code>analyseThigmotaxis</code>: Analyses the position and time spent by the subject in thigmotaxis.</li> </ul> <pre><code>for exp in experiments:\n    exp.analyse(analyseDistance, analyseSpeed, analyseThigmotaxis)\n</code></pre>"},{"location":"tutorials/usage_examples/one_experiment.html","title":"Analysing a Single Experiment","text":""},{"location":"tutorials/usage_examples/one_experiment.html#loading-in-all-relevant-packages","title":"Loading in all relevant packages","text":"<pre><code>from ba_pipeline import *\n</code></pre>"},{"location":"tutorials/usage_examples/one_experiment.html#making-the-experiment","title":"Making the Experiment","text":"<p>The directory path of the project must be specified and must contain the experiment files you wish to analyse in a particular folder structure.</p> <p>For more information on how to structure a project directory, please see setup.</p> <p>For more information on how a <code>BAExperiment</code> works, please see BAExperiment.</p> <pre><code>proj_dir = \"./project\"\nexp_name = \"experiment1\"\nexp = BAExperiment(exp_name, proj_dir)\n</code></pre>"},{"location":"tutorials/usage_examples/one_experiment.html#alternative-selecting-an-experiment-from-a-project","title":"ALTERNATIVE: Selecting an experiment from a Project","text":"<p>Alternatively, you can make a project and then specify the experiment to analyse from the project. The name of an experiment is given by the name of its corresponding files (e.g., \".mp4\"). <pre><code># Making a project and importing experiments into the project\nproj = BAProject(proj_dir)\nproj.importExperiments()\n\n# Showing the names of all experiments that have been imported to the project\nfor exp_name in proj.experiments:\n    print(exp_name)\n\n# Selecting the single experiment from the project to analyse\nexp_name = \"experiment1\"\nexp = proj.experiments[\"experiment1\"]\n</code></pre>"},{"location":"tutorials/usage_examples/one_experiment.html#updating-the-configurations-for-the-experiment","title":"Updating the configurations for the experiment","text":"<p>If you would like the configurations (which are stored in config files) to be updated new parameters, define the JSON style of configuration parameters you would like to add and run the following lines.</p> <p>For more information about how a configurations file works, please see the configs file.</p> <pre><code>configs_fp = \"path/to/default_configs.json\"\nexp.updateConfigFile(configs_fp, overwrite=\"add\")\n</code></pre>"},{"location":"tutorials/usage_examples/one_experiment.html#analysing-a-single-experiment_1","title":"Analysing a single experiment","text":"<p>Each of the following processes will be explained prior to running the process.</p> <p><code>formatVideo</code> formats the raw mp4 video so it can be fed through the DLC pose estimation algorithm.</p> <pre><code>exp.formatVideo()\n</code></pre> <p><code>runDLC</code>: Runs the DLC pose estimation algorithm on the formatted mp4 file.</p> <pre><code>exp.runDLC()\n</code></pre> <p><code>calculateParams</code> calculates relevant parameters to store in the <code>auto</code> section of the config file. The calculations performed are:</p> <ul> <li><code>calcStartFrame</code>: calculates the start frame of the video based on when the subject entered the video.</li> <li><code>calcEndFrame</code>: calculates the end frame of the video based on the start frame and user-defined duration.</li> <li><code>calcPXPerMM</code>: calculates the pixels per mm conversion for the video based on the user-defined height and width of the arena.</li> </ul> <pre><code>exp.calculateParams(getVideoMetadata, calcStartFrame, calcEndFrame, calcPXPerMM)\n</code></pre> <p><code>preprocess</code> preprocesses the DLC csv data and output the preprocessed data to a <code>preprocessed_csv.&lt;exp_name&gt;.csv</code> file. The preprocessings performed are:</p> <ul> <li><code>trimToStartEnd</code>: Trims the csv data between the experiment start and end frames, which are either defined by the user or from <code>calculateParams</code>.</li> <li><code>interpolatePoints</code>: Linearly interpolates subject points that have an accuracy below a user-defined pcutoff.</li> <li><code>calcBodyCentre</code>: Calculate the average \"centre\" of the subject, based on the user-defined list of body parts and name these $(x,y)$ points with a user-defined name. This $(x,y)$ data is added as a column to the raw data.</li> <li><code>mapTimestamps</code>: adds a column to the dataframe which is the time (in seconds) from the beginning of the video for each frame.</li> </ul> <pre><code>exp.preprocess(trimToStartEnd, interpolatePoints, calcBodyCentre, mapTimestamps)\n</code></pre> <p><code>analyse</code> analyses the preprocessed csv data to extract useful analysis and results. The analyses performed are:</p> <ul> <li><code>analyseDistance</code>: Analyses the distance that the subject travels over time.</li> <li><code>analyseSpeed</code>: Analyses the speed of the subject over time.</li> <li><code>analyseThigmotaxis</code>: Analyses the position and time spent by the subject in thigmotaxis.</li> </ul> <pre><code>exp.analyse(analyseDistance, analyseSpeed, analyseThigmotaxis)\n</code></pre>"},{"location":"tutorials/usage_examples/one_project.html","title":"Analysing a Single Project","text":""},{"location":"tutorials/usage_examples/one_project.html#loading-in-all-relevant-packages","title":"Loading in all relevant packages","text":"<pre><code>from ba_pipeline import *\n</code></pre>"},{"location":"tutorials/usage_examples/one_project.html#making-the-project-and-importing-all-experiments","title":"Making the project and importing all experiments","text":"<p>The directory path of the project must be specified and must contain the experiment files you wish to analyse in a particular folder structure.</p> <p>For more information on how to structure a project directory, please see setup.</p> <p>For more information on how a <code>BAExperiment</code> works, please see BAProject.</p> <pre><code>proj_dir = \"./project\"\nproj = BAProject(proj_dir)\n\nproj.importExperiments()\n</code></pre>"},{"location":"tutorials/usage_examples/one_project.html#checking-all-imported-experiments","title":"Checking all imported experiments","text":"<p>To see all imported experiments, see the <code>proj_dir/diagnostics/importExperiments.csv</code> file that has been generated.</p>"},{"location":"tutorials/usage_examples/one_project.html#updating-the-configurations-for-all-experiments","title":"Updating the configurations for all experiments","text":"<p>If you would like the configurations (which are stored in config files) to be updated new parameters, define the JSON style of configuration parameters you would like to add and run the following lines.</p> <p>For more information about how a configurations file works, please see the configs file.</p> <pre><code>configs_fp = \"path/to/default_configs.json\"\nproj.updateConfigFiles(configs_fp, overwrite=\"add\")\n</code></pre>"},{"location":"tutorials/usage_examples/one_project.html#analysing-all-experiments-in-a-project","title":"Analysing all experiments in a project","text":"<p>The following code processes and analyses all experiments that have been imported into a project. This is similar to analysing a single experiment.</p> <p>All outcomes for experiment processing is stored in csv files in the <code>proj_dir/diagnostics</code> folder. These files store the outcome and process description (i.e. error explanations) of all experiments.</p> <p>Each of the following processes will be explained prior to running the process.</p> <p><code>formatVideo</code> formats the raw mp4 videos so it can be fed through the DLC pose estimation algorithm.</p> <pre><code>proj.formatVideos()\n</code></pre> <p><code>runDLC</code>: Runs the DLC pose estimation algorithm on the formatted mp4 files.</p> <pre><code>proj.runDLC()\n</code></pre> <p><code>calculateParams</code> calculates relevant parameters to store in the <code>auto</code> section of the config file. The calculations performed are:</p> <ul> <li><code>calcStartFrame</code>: calculates the start frame of the video based on when the subject entered the video.</li> <li><code>calcEndFrame</code>: calculates the end frame of the video based on the start frame and user-defined duration.</li> <li><code>calcPXPerMM</code>: calculates the pixels per mm conversion for the video based on the user-defined height and width of the arena.</li> </ul> <pre><code>proj.calculateParams(getVideoMetadata, calcStartFrame, calcEndFrame, calcPXPerMM)\n</code></pre> <p><code>preprocess</code> preprocesses the DLC csv data and output the preprocessed data to a <code>preprocessed_csv.&lt;exp_name&gt;.csv</code> file. The preprocessings performed are:</p> <ul> <li><code>trimToStartEnd</code>: Trims the csv data between the experiment start and end frames, which are either defined by the user or from <code>calculateParams</code>.</li> <li><code>interpolatePoints</code>: Linearly interpolates subject points that have an accuracy below a user-defined pcutoff.</li> <li><code>calcBodyCentre</code>: Calculate the average \"centre\" of the subject, based on the user-defined list of body parts and name these $(x,y)$ points with a user-defined name. This $(x,y)$ data is added as a column to the raw data.</li> <li><code>mapTimestamps</code>: adds a column to the dataframe which is the time (in seconds) from the beginning of the video for each frame.</li> </ul> <pre><code>proj.preprocess(trimToStartEnd, interpolatePoints, calcBodyCentre, mapTimestamps)\n</code></pre> <p><code>analyse</code> analyses the preprocessed csv data to extract useful analysis and results. The analyses performed are:</p> <ul> <li><code>analyseDistance</code>: Analyses the distance that the subject travels over time.</li> <li><code>analyseSpeed</code>: Analyses the speed of the subject over time.</li> <li><code>analyseThigmotaxis</code>: Analyses the position and time spent by the subject in thigmotaxis.</li> </ul> <pre><code>proj.analyse(analyseDistance, analyseSpeed, analyseThigmotaxis)\n</code></pre> <p><code>aggregateAnalysis</code> combines the analysis from all experiments for each different analysis metric. For example, each subject's distance travelled for every x seconds is combined into a single csv file for comparison.</p> <pre><code>proj.aggregateAnalysis()\n</code></pre>"}]}